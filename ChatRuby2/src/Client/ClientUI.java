/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author vutrunganh
 */
public class ClientUI extends javax.swing.JFrame {

    /**
     * Creates new form ClientUI
     */
    
    private ObjectInputStream input;
    private ObjectOutputStream output;
    private String message = "";
    private String serverIP;
    private Socket connection;
    private int port = 8000;
    private String name;
    DefaultListModel listOnline = new DefaultListModel();
    DefaultListModel listChat = new DefaultListModel();
    private HashMap<String, ArrayList<String>> mapMessage = new HashMap<>();
    private HashMap<String, ArrayList<String>> mapMessageEx = new HashMap<>();
    private ArrayList<String> listMessage = new ArrayList<>();
    private ArrayList<String> listChats = new ArrayList<>();
    private ArrayList<String> listUserOnline = new ArrayList<>();
    private ArrayList<String> messageInGroup = new ArrayList<>();
    ClientConnectDB mysqapp = new ClientConnectDB();
    private static String toClient = "group";
    
    public ClientUI(String s) throws SQLException{
        initComponents();
        this. setTitle("UserName");
        this.setVisible(true);
        userOnline.setModel(listOnline);
        listchat.setModel(listChat);
        listChat.addElement("group");
        serverIP = s;
        name = JOptionPane.showInputDialog(null, "What's your name?");
        this.setTitle(name);
        if (!mysqapp.checkUser(name)) {
            mysqapp.insertUsername(name);
        }
        ArrayList<String> message_default = mysqapp.getMessageGroupDefault();
        for (int i = 0; i < message_default.size(); i++) {
            String message = message_default.get(i);
            messageInGroup.add(message);
            jTextAreaMessages.append(message);
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMessages = new javax.swing.JTextArea();
        jTextInput = new javax.swing.JTextField();
        jButtonSend = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        userOnline = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        listchat = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaMessages.setColumns(20);
        jTextAreaMessages.setRows(5);
        jScrollPane1.setViewportView(jTextAreaMessages);

        jTextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextInputActionPerformed(evt);
            }
        });

        jButtonSend.setText("Send");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        userOnline.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                userOnlineAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        userOnline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userOnlineMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(userOnline);

        listchat.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "group", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listchat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listchatMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listchat);

        jLabel1.setText("jLabel1");

        jLabel2.setText("Online");

        jLabel3.setText("Chat");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                        .addComponent(jScrollPane1))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSend))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextInputActionPerformed
        try {
            sendMessage(jTextInput.getText().trim());
        } catch (SQLException | IOException ex) {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextInput.setText("");
    }//GEN-LAST:event_jTextInputActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        try {
            sendMessage(jTextInput.getText().trim());
        } catch (SQLException | IOException ex) {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTextInput.setText("");
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void userOnlineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userOnlineMouseClicked
        String username = userOnline.getSelectedValue().toString();
        if (!listChat.contains(username)){
            listChat.addElement(username);
        }
        jTextAreaMessages.setText("");
        
    }//GEN-LAST:event_userOnlineMouseClicked

    private void userOnlineAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_userOnlineAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_userOnlineAncestorAdded

    private void listchatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listchatMouseClicked
        toClient = listchat.getSelectedValue().toString();
        if (toClient.equals("group")){
            jTextAreaMessages.setText("");
            for (int i = 0; i < messageInGroup.size(); i++){
                jTextAreaMessages.append(messageInGroup.get(i));
            }
        }
        else{
            if (!mapMessage.isEmpty()){
                jTextAreaMessages.setText("");
                ArrayList<String> getMessage = mapMessage.get(toClient);
                ArrayList<String> getMessageEx = mapMessageEx.get(toClient);
                if (!getMessageEx.isEmpty()){
                    for (int i = 0; i < getMessageEx.size(); i++){
                        jTextAreaMessages.append(getMessageEx.get(i));
                    }
                }
                if (!getMessage.isEmpty()){
                    for (int i = 0 ; i < getMessage.size(); i++){
                        jTextAreaMessages.append(getMessage.get(i));
                    }
                }
            }
        }
    }//GEN-LAST:event_listchatMouseClicked

    private void sendMessage(String message) throws SQLException, IOException {
        try {
            if (!toClient.equals("group")) {
                HashMap<String, String> messageToUser = new HashMap<>();
                messageToUser.put(toClient, message);
                mapMessage.get(toClient).add(this.name + ": " + message + "\n");
                output.writeObject(messageToUser);
                output.flush();
            } else {
                output.writeObject(this.name + ": " + message);
                output.flush();
                messageInGroup.add(this.name + ": " + message + "\n");
                mysqapp.insertGroupDefault(this.name, this.name + ": " + message + "\n");
            }

            jTextAreaMessages.append(this.name + ": " + message + "\n");
        } catch (IOException ioException) {
            jTextAreaMessages.append("\n Unable to Send Message");
        }
    }
    /**
     * @param args the command line arguments
     */
    @Override
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }
    public void startRunning() throws ClassNotFoundException, SQLException {
        try {
            //status.setText("Attempting Connection ...");
            try {
                connection = new Socket(InetAddress.getByName(serverIP), port);
            } catch (IOException ioEception) {
                JOptionPane.showMessageDialog(null, "Server Might Be Down!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
//            status.setText("Connected to: " + connection.getInetAddress().getHostName());

            output = new ObjectOutputStream(connection.getOutputStream());
            output.flush();
            output.writeObject(name);
            output.flush();
            input = new ObjectInputStream(connection.getInputStream());
            whileChatting();
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }
    private void whileChatting() throws IOException, SQLException {
        jTextInput.setEditable(true);
        do {
            try {
                Object messageObject = input.readObject();
                if (messageObject instanceof ArrayList) {
                    ArrayList<String> list_chat = (ArrayList) messageObject;
                    for (int i = 0; i < list_chat.size(); i++) {
                        System.out.println(list_chat.get(i));
                        if (!list_chat.get(i).equals(this.name) && !listOnline.contains(list_chat.get(i))) {
                            listOnline.addElement(list_chat.get(i).trim());
                            if (!mapMessage.containsKey(list_chat.get(i).trim())) {
                                ArrayList<String> newMessage = new ArrayList<>();
                                mapMessage.put(list_chat.get(i).trim(), newMessage);
                                if (mysqapp.checkUser(list_chat.get(i).trim())) {
                                    ArrayList<String> oldMessage = mysqapp.getMessage(this.name, list_chat.get(i).trim());
                                    mapMessageEx.put(list_chat.get(i).trim(), oldMessage);
                                }
                            }
                        }
                    }
                } else if (messageObject instanceof HashMap) {
                    HashMap<String, String> messageFromUser = (HashMap) messageObject;
                    String value = "";
                    for (String key : messageFromUser.keySet()) {
                        value = messageFromUser.get(key);
                        String usernameFormClient = value.split(":")[0];
                        if (!listChat.contains(usernameFormClient)) {
                            listChat.addElement(usernameFormClient);
                        }
                        // check xem da co trong danh sach message hay chua.
                        if (!mapMessage.containsKey(usernameFormClient)) {
                            ArrayList<String> newMessage = new ArrayList<>();
                            mapMessage.put(usernameFormClient, newMessage);
                        }

                        mapMessage.get(usernameFormClient).add(value + "\n");
                        if (!toClient.equals("group")) {
                            jTextAreaMessages.append(value + "\n");
                        }

                    }
                } else if (messageObject instanceof String) {
                    message = (String) messageObject;
                    if (message.contains("join room.")) {
                        String data = message.split(" ")[0];
                        listOnline.addElement(data);
                        ArrayList<String> newMessage = new ArrayList<>();
                        mapMessage.put(data, newMessage);
                        ArrayList<String> oldMessage = mysqapp.getMessage(this.name, data);
                        mapMessageEx.put(data, oldMessage);
                    }
                    messageInGroup.add(message + "\n");
                    if (toClient.equals("group")) {
                        jTextAreaMessages.append(message + "\n");
                    }

                }

            } catch (ClassNotFoundException classNotFoundException) {
            }
        } while (!message.equals("Client - END"));
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
//                    new ClientUI().setVisible(true);
//                } catch (SQLException ex) {
//                    Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextAreaMessages;
    private javax.swing.JTextField jTextInput;
    private javax.swing.JList<String> listchat;
    private javax.swing.JList<String> userOnline;
    // End of variables declaration//GEN-END:variables
}
